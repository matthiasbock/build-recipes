#
# Creates a container image with armhf Debian rootfs
# and qemu-arm-static for amd64
#

name: qemu-armhf-debian-base


# Control when the action will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - master
    paths:
      - '!.**'
      - '!**'
      - '.github/workflows/qemu-armhf-debian-base.yml'
      - 'qemu-armhf-debian-base/**'
      - 'images/qemu-armhf-debian-base/**'

#  pull_request:
#    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  bootstrap:
    name: Bootstrap Debian rootfs
    runs-on: ubuntu-latest
    env:
      DEBIAN_REPO: http://deb.debian.org/debian/
      DEBIAN_RELEASE: buster
      DEBIAN_VARIANT: minbase
      WORKDIR: image
      ROOTFS_FILENAME: image.tar.gz
      ROOTFS_HANDLE: qemu-armhf-debian-base-rootfs
    steps:
      - uses: actions/checkout@v2

      - name: Print debug information
        run: |
          me=$(whoami)
          echo "I am $me."
          uname -a
          echo $GITHUB_WORKSPACE
          cd $GITHUB_WORKSPACE
          ls -la
          cd .github/workflows/
          cat ${GITHUB_WORKFLOW}.yml

      - name: Prepare for package installation
        run: |
          sudo apt-get -q update
          sudo apt-get -q install -y ubuntu-*keyring debian-*keyring ca-certificates
          apt-key list

      - name: Install build dependencies
        run: |
          sudo apt-get -q install -y qemu-user-static debootstrap coreutils

      - name: Bootstrap Debian
        run: |
          cd "$GITHUB_WORKSPACE/images/qemu-armhf-debian-base/"
          ls -la
          mkdir -p "$WORKDIR"
          sudo qemu-debootstrap --arch=armhf "$DEBIAN_RELEASE" --variant="$DEBIAN_VARIANT" "$WORKDIR" "$DEBIAN_REPO"

      - name: Configure bootstrapped system
        run: |
          cd "$GITHUB_WORKSPACE/images/qemu-armhf-debian-base/"
          me=$(whoami)
          sudo chown $me "$WORKDIR/"
          sudo cp -v hostname "$WORKDIR/etc/"
          sudo cp -v sources.list "$WORKDIR/etc/apt/"

      - name: Add qemu binary
        run: |
          cd "$GITHUB_WORKSPACE/images/qemu-armhf-debian-base/"
          cp -v "$(which qemu-arm-static)" "$WORKDIR"

      - name: Install additional packages
        run: |
          cd "$GITHUB_WORKSPACE/images/qemu-armhf-debian-base/"
          sudo chroot "$WORKDIR" qemu-arm-static bin/bash -c \
            "apt-get -q update; \
            apt-get -q install -y ca-certificates; \
            apt-get -q update; \
            apt-get -q install -y ubuntu-*keyring debian-*keyring; \
            apt-key list; \
            apt-get -q install -y netselect-apt; \
            netselect-apt -s $DEBIAN_RELEASE; \
            apt-get -q install -y coreutils bash vim nano apt aptitude rsync wget git; \
            apt-get -q clean"

      - name: Create artifact
        run: |
            cd "$GITHUB_WORKSPACE/images/qemu-armhf-debian-base/"
            sudo tar -cvzf $ROOTFS_FILENAME image/
            sudo chmod +r $ROOTFS_FILENAME

      - name: Save artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ROOTFS_HANDLE }}
          path: ${{ github.workspace }}/images/qemu-armhf-debian-base/${{ env.ROOTFS_FILENAME }}
          retention-days: 1

  github-release:
    name: Release tarball
    needs: bootstrap
    runs-on: ubuntu-latest
    env:
      ROOTFS_HANDLE: qemu-armhf-debian-base-rootfs
      ROOTFS_FILENAME: qemu-armhf-debian-base-rootfs.tar.gz
      RELEASE_TAG: qemu-armhf-debian-base-${{ env.GITHUB_SHA }}
    steps:
      - name: Retrieve artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ROOTFS_HANDLE }}
          path: ${{ github.workspace }}/${{ env.ROOTFS_FILENAME }}

      - name: Release on GitHub
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ github.workspace }}/${{ env.ROOTFS_FILENAME }}
          tag_name: ${{ env.RELEASE_TAG }}

  docker-build:
    name: Build Docker image
    needs: bootstrap
    runs-on: ubuntu-latest
    env:
      ROOTFS_HANDLE: qemu-armhf-debian-base-rootfs
      ROOTFS_FILENAME: image.tar.gz
      CONTAINER_IMAGE: matthiasbock/qemu-armhf-debian-base
      CONTAINER_FILENAME: docker-image.tar
      CONTAINER_HANDLE: qemu-armhf-debian-base-docker-image
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Retrieve artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ROOTFS_HANDLE }}
          path: ${{ github.workspace }}/images/qemu-armhf-debian-base/${{ env.ROOTFS_FILENAME }}

      - name: Unpack artifact
        run: |
          cd "$GITHUB_WORKSPACE/images/qemu-armhf-debian-base/"
          sudo tar -xvzf {{ env.ROOTFS_FILENAME }}

      - name: Build Docker image
        run: |
          cd "$GITHUB_WORKSPACE/images/qemu-armhf-debian-base/"
          sudo docker build -t $CONTAINER_IMAGE:$GITHUB_SHA .
          docker save $CONTAINER_IMAGE:$GITHUB_SHA > $CONTAINER_FILENAME

      - name: Save Docker image
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.CONTAINER_HANDLE }}
          path: ${{ github.workspace }}/images/qemu-armhf-debian-base/${{ env.CONTAINER_FILENAME }}
          retention-days: 1

  docker-deploy:
    name: Deploy to Docker Hub
    needs: docker-build
    runs-on: ubuntu-latest
    env:
      CONTAINER_HANDLE: qemu-armhf-debian-base-docker-image
      CONTAINER_FILENAME: docker-image.tar
      CONTAINER_IMAGE: matthiasbock/qemu-armhf-debian-base
    steps:
      - name: Retrieve saved Docker image
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.CONTAINER_HANDLE }}
          path: ${{ github.workspace }}/images/qemu-armhf-debian-base/${{ env.CONTAINER_FILENAME }}

      - name: Load Docker image
        run: |
          cd "$GITHUB_WORKSPACE/images/qemu-armhf-debian-base/"
          docker load < $CONTAINER_FILENAME

      - name: Push image to Docker Hub
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: $CONTAINER_IMAGE
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  cleanup:
    name: Remove intermediate artifacts
    needs:
      - github-release
      - docker-deploy
    runs-on: ubuntu-latest
    env:
      ROOTFS_HANDLE: qemu-armhf-debian-base-rootfs
      CONTAINER_HANDLE: qemu-armhf-debian-base-docker-image
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: ${{ env.ROOTFS_HANDLE }}

      - uses: geekyeggo/delete-artifact@v1
        with:
          name: ${{ env.CONTAINER_HANDLE }}
